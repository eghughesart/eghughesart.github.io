{"version":3,"file":"component---src-pages-index-js-136806ba44f3afd541ce.js","mappings":"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","sources":["webpack://prismic-v4/./node_modules/hex-rgb/index.js","webpack://prismic-v4/./src/components/workTile.js","webpack://prismic-v4/./src/pages/index.js"],"sourcesContent":["const hexCharacters = 'a-f\\\\d';\nconst match3or4Hex = \"#?[\".concat(hexCharacters, \"]{3}[\").concat(hexCharacters, \"]?\");\nconst match6or8Hex = \"#?[\".concat(hexCharacters, \"]{6}([\").concat(hexCharacters, \"]{2})?\");\nconst nonHexChars = new RegExp(\"[^#\".concat(hexCharacters, \"]\"), 'gi');\nconst validHexSize = new RegExp(\"^\".concat(match3or4Hex, \"$|^\").concat(match6or8Hex, \"$\"), 'i');\nexport default function hexRgb(hex) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  if (typeof hex !== 'string' || nonHexChars.test(hex) || !validHexSize.test(hex)) {\n    throw new TypeError('Expected a valid hex string');\n  }\n  hex = hex.replace(/^#/, '');\n  let alphaFromHex = 1;\n  if (hex.length === 8) {\n    alphaFromHex = Number.parseInt(hex.slice(6, 8), 16) / 255;\n    hex = hex.slice(0, 6);\n  }\n  if (hex.length === 4) {\n    alphaFromHex = Number.parseInt(hex.slice(3, 4).repeat(2), 16) / 255;\n    hex = hex.slice(0, 3);\n  }\n  if (hex.length === 3) {\n    hex = hex[0] + hex[0] + hex[1] + hex[1] + hex[2] + hex[2];\n  }\n  const number = Number.parseInt(hex, 16);\n  const red = number >> 16;\n  const green = number >> 8 & 255;\n  const blue = number & 255;\n  const alpha = typeof options.alpha === 'number' ? options.alpha : alphaFromHex;\n  if (options.format === 'array') {\n    return [red, green, blue, alpha];\n  }\n  if (options.format === 'css') {\n    const alphaString = alpha === 1 ? '' : \" / \".concat(Number((alpha * 100).toFixed(2)), \"%\");\n    return \"rgb(\".concat(red, \" \").concat(green, \" \").concat(blue).concat(alphaString, \")\");\n  }\n  return {\n    red,\n    green,\n    blue,\n    alpha\n  };\n}","import React from \"react\"\nimport styled from \"styled-components\"\nimport AspectFittedImage from \"./aspectFittedImage.js\"\nimport { Link } from \"gatsby\";\nimport hexRgb from \"hex-rgb\"\n\nconst TilePlaceholder = styled.div`\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n`\n\nconst Container = styled(Link)`\n    position: relative;\n    width: 100%;\n    height: 100%;\n`\n\nconst Overlay = styled.div`\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n\n    background-color: ${props => props.theme.color};\n\n    user-select: none;\n    transition: .3s ease;\n    opacity: 0;\n\n    &:hover {\n        opacity: 1;\n    }\n\n    @media (hover: none), (hover:on-demand) {\n        &:hover {\n            opacity: 0;\n        }\n    }\n}\n`\n\nclass WorkTile extends React.PureComponent {\n\n    render() {\n        const work = this.props.work\n        const tileImage = work.data.featured_image\n\n        let contentComponent\n        if (tileImage == null || tileImage.localFile == null) {\n            contentComponent = <TilePlaceholder />\n        } else {\n            const tileImageData = tileImage.localFile.childImageSharp.gatsbyImageData\n            contentComponent = <AspectFittedImage image={tileImageData} />\n        }\n\n        const primaryRGB = hexRgb(\"#292929\")\n        const tileOpacity = 10 / 100\n        const overlayTheme = {\n            color: `rgba(${primaryRGB.red}, ${primaryRGB.green}, ${primaryRGB.blue}, ${tileOpacity})`\n        }\n\n        return (\n            <Container to={this.props.work.url}>\n                {contentComponent}\n                <Overlay theme={overlayTheme} />\n            </Container>\n        )\n    }\n}\n\nexport default WorkTile","import React from \"react\"\nimport { graphql } from \"gatsby\";\nimport styled from \"styled-components\"\nimport WorkTile from \"../components/workTile\"\nimport SEO from \"../components/SEO/SEO\"\n\nconst Container = styled.div``\n\nconst WorkList = styled.div`\n  display: grid;\n  grid-template-columns: 1fr 1fr 1fr;\n  grid-template-rows: 1fr;\n  grid-gap: 16px;\n\n  @media (max-width: 1023px) {\n    grid-template-columns: 1fr 1fr;\n  }\n\n  @media (max-width: 767px) {\n    grid-template-columns: 1fr;\n  }\n`\n\nconst WorkTileWrapper = styled.div`\n  background: #f5f5f5;\n  display: flex;\n  height: 100%;\n\n  ::before {\n    content: \"\";\n    display: block;\n    height: 0;\n    width: 0;\n    padding-bottom: calc(3/4 * 100%);\n  }\n`\n\nconst Index = ({ data: { prismicWork } }) => (\n  <Container>\n    <SEO />\n    <WorkList>\n      {prismicWork.data.works.map((item, index) => {\n        const work = {\n          url: item.work_detail.url,\n          data: item.work_detail.document.data\n        }\n        return (\n          <WorkTileWrapper key={index} >\n            <WorkTile work={work} />\n          </WorkTileWrapper>\n        )\n      })}\n    </WorkList>\n  </Container>\n)\n\nexport default Index\n\nexport const pageQuery = graphql`\n  query IndexQuery {\n    prismicWork {\n      data {\n        works {\n          work_detail {\n            url\n            document {\n              __typename\n              ...WorkdetailFragment\n            }\n          }\n        }\n      }\n    }\n  }\n\n  fragment WorkdetailFragment on PrismicWorkdetail {\n    data {\n      title {\n        text\n      }\n      featured_image {\n        alt\n        localFile {\n          childImageSharp {\n            gatsbyImageData(\n              width: 648\n              placeholder: NONE\n              formats: [AUTO, WEBP, AVIF]\n            )\n          }\n        }\n      }\n    }\n  }\n`"],"names":["hexCharacters","match3or4Hex","concat","match6or8Hex","nonHexChars","RegExp","validHexSize","TilePlaceholder","styled","displayName","componentId","Container","Link","withConfig","Overlay","props","theme","color","WorkTile","_React$PureComponent","apply","arguments","_inheritsLoose","prototype","render","tileImage","this","work","data","featured_image","contentComponent","localFile","React","tileImageData","childImageSharp","gatsbyImageData","AspectFittedImage","image","primaryRGB","hex","options","length","undefined","test","TypeError","alphaFromHex","replace","Number","parseInt","slice","repeat","number","red","green","blue","alpha","format","alphaString","toFixed","hexRgb","overlayTheme","to","url","WorkList","WorkTileWrapper","_ref","prismicWork","SEO","works","map","item","index","work_detail","document","key"],"sourceRoot":""}